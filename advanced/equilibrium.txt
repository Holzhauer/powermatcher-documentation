The function `.calculateIntersection()` resides in the object ArrayBid. `AggregatedBid` extends ArrayBid but also stores all references to the Bids that have contributed to that `AggregatedBid`. An ArrayBidis explained in more detail in [[Data Objects|DataObjects]].

```
    @Override
    public Price calculateIntersection(double targetDemand) {
        int leftIx = 0, rightIx = demandArray.length - 1;

        // First test for a few special cases
        if (targetDemand > demandArray[leftIx]) {
            // If the target is higher than the maximum of the bid, return the minimum price
            return new Price(marketBasis, marketBasis.getMinimumPrice());
        } else if (targetDemand < demandArray[rightIx]) {
            // If the target is lower than the minimum of the bid, return the maximum price
            return new Price(marketBasis, marketBasis.getMaximumPrice());
        } else if (demandIsEqual(targetDemand, demandArray[leftIx])) {
            rightIx = leftIx;
        } else if (demandIsEqual(targetDemand, demandArray[rightIx])) {
            leftIx = rightIx;
        } else { // demand is between the limits of this bid, which can not be flat at this point
            // Go on while there is at least 1 point between the left and right index
            while (rightIx - leftIx > 1) {
                // Determine the middle between the 2 boundaries
                int middleIx = (leftIx + rightIx) / 2;
                double middleDemand = demandArray[middleIx];

                if (demandIsEqual(targetDemand, middleDemand)) {
                    // A point with the target demand is found, select this point
                    leftIx = rightIx = middleIx;
                } else if (middleDemand > targetDemand) {
                    // If the middle demand is bigger than the target demand, we set the left to the middle
                    leftIx = middleIx;
                } else { // middleDemand < targetDemand
                    // If the middle demand is smaller than the target demand, we set the right to the middle
                    rightIx = middleIx;
                }
            }
        }

        // If the left or right point matches the targetDemand, expand the range
        while (leftIx > 0 && demandIsEqual(targetDemand, demandArray[leftIx - 1])) {
            leftIx--;
        }
        while (rightIx < demandArray.length - 1 && demandIsEqual(targetDemand, demandArray[rightIx + 1])) {
            rightIx++;
        }

        return interpolate(leftIx, rightIx, targetDemand);
    }

```

The Price is then published to each connected Agent/Session which is handled in the [[BaseMatcherEndpoint|https://github.com/flexiblepower/powermatcher/blob/development/net.powermatcher.core/src/net/powermatcher/core/BaseMatcherEndpoint.java]] of the Auctioneer, see [[PowerMatcher API|PowerMatcher-API]] for more information:

```
    public void publishPrice(Price price, AggregatedBid aggregatedBid) {
        Map<String, Integer> references = aggregatedBid.getAgentBidReferences();

        for (Session session : sessions.values()) {
            Integer bidNumber = references.get(session.getAgentId());
            if (bidNumber != null) {
                PriceUpdate priceUpdate = new PriceUpdate(price, bidNumber);
                publishEvent(new OutgoingPriceUpdateEvent(session.getClusterId(),
                                                          getAgentId(),
                                                          session.getSessionId(),
                                                          context.currentTime(),
                                                          priceUpdate));
                LOGGER.debug("New price: {}, session {}", priceUpdate, session.getSessionId());

                session.updatePrice(priceUpdate);
            }
        }
    }

```
